"""
dodo.py - Automates project tasks using doit.

This file uses the `doit` Python package to define tasks. 
Each task is defined by its actions, file dependencies, and optional targets.
"""

import os
from pathlib import Path
from src import config

# Read directory configuration from config
DATA_DIR = config.DATA_DIR
OUTPUT_DIR = config.OUTPUT_DIR

def task_table02_main():
    """
    Task: Run Table02Prep.py to generate Table 2's LaTeX tables and figures.
    Execute both the original version (UPDATED=False) and the updated version (UPDATED=True).
    """
    return {
        "actions": [
            'ipython -c "import sys; sys.path.insert(0, \'src\'); import Table02Prep; Table02Prep.main()"',
            'ipython -c "import sys; sys.path.insert(0, \'src\'); import Table02Prep; Table02Prep.main(UPDATED=True)"'
        ],
        "file_dep": [
            "./src/Table02Prep.py"
        ],
        # We keep an empty clean key:
        "clean": []
    }

def task_test_table02():
    """
    Task: Run the unit tests in Table02_testing.py.
    We change to the src directory before running the tests.
    """
    return {
        "actions": [
            'cd src && ipython -m unittest Table02_testing.py'
        ],
        "file_dep": [
            "./src/Table02_testing.py"
        ],
        "clean": []
    }

def task_table03_main():
    """
    Task: Run Table03.py to generate Table 3's LaTeX tables, summary statistics, and figures.
    Execute both the original version (UPDATED=False) and the updated version (UPDATED=True).
    """
    return {
        "actions": [
            'ipython -c "import sys; sys.path.insert(0, \'src\'); import Table03; Table03.main()"',
            'ipython -c "import sys; sys.path.insert(0, \'src\'); import Table03; Table03.main(UPDATED=True)"'
        ],
        "file_dep": [
            "./src/Table03.py"
        ],
        "clean": []
    }

def task_test_table03():
    """
    Task: Run the unit tests in Table03_testing.py.
    We change to the src directory before running the tests.
    """
    return {
        "actions": [
            'cd src && ipython -m unittest Table03_testing.py'
        ],
        "file_dep": [
            "./src/Table03_testing.py"
        ],
        "clean": []
    }

def task_pull_fred_data():
    """
    Task: Update FRED historical data and Shiller PE data by calling Table03Load module.
    """
    return {
        "actions": [
            'ipython -c "import sys; sys.path.insert(0, \'src\'); import Table03Load; Table03Load.load_fred_past()"',
            'ipython -c "import sys; sys.path.insert(0, \'src\'); import Table03Load; Table03Load.load_shiller_pe()"'
        ],
        "file_dep": [
            "./src/Table03Load.py"
        ],
        "clean": []
    }

def task_run_notebook():
    """
    Task: Execute the FinalCombinedWalkthrough.ipynb notebook.
    First clear the notebook outputs, then execute and save it to OUTPUT_DIR.
    """
    executed_notebook = Path(OUTPUT_DIR) / "FinalCombinedWalkthrough_executed.ipynb"
    return {
        "actions": [
            f'jupyter nbconvert --ClearOutputPreprocessor.enabled=True --inplace ./src/FinalCombinedWalkthrough.ipynb',
            f'jupyter nbconvert --to notebook --execute ./src/FinalCombinedWalkthrough.ipynb --output "{executed_notebook}"'
        ],
        "file_dep": [
            "./src/FinalCombinedWalkthrough.ipynb"
        ],
        "targets": [
            str(executed_notebook)
        ],
        "clean": []
    }

def task_generate_latex_doc():
    """
    Task: Integrate all automatically generated .tex and .png files (Table02, Table03, etc.) 
    into one combined LaTeX document, then run pdflatex to produce a PDF.
    """
    return {
        "actions": [
            # Call LaTeXDocGenerator.main() using ipython
            'ipython -c "import sys; sys.path.insert(0, \'src\'); import LaTeXDocGenerator; LaTeXDocGenerator.main()"'
        ],
        # Declare file dependencies (these files must exist before generating the combined document)
        "file_dep": [
            "./src/LaTeXDocGenerator.py",

            "./_output/table02.tex",
            "./_output/table02_figure.png",
            "./_output/table02_sstable.tex",
            "./_output/table02_corr.tex",
            "./_output/updated_table02.tex",
            "./_output/updated_table02_figure.png",
            "./_output/updated_table02_sstable.tex",
            "./_output/updated_table02_corr.tex",

            "./_output/table03.tex",
            "./_output/table03_figure.png",
            "./_output/table03_figure03.png",
            "./_output/table03_sstable.tex",
            "./_output/updated_table03.tex",
            "./_output/updated_table03_figure.png",
            "./_output/updated_table03_figure03.png",
            "./_output/updated_table03_sstable.tex",
        ],
        # Targets are the files we expect to be generated by this task
        "targets": [
            "./_output/combined_document.tex",
            "./_output/combined_document.pdf"
        ],
        # Keep an empty "clean" so it is declared but does nothing
        "clean": []
    }
