"""
Table03_testing.py

This module provides unit tests for the outputs generated by the Table03 pipeline.
It verifies that:
- The LaTeX final correlation table is generated and contains valid numeric values.
- The summary statistics table (in LaTeX format) is generated and contains no missing values.
- (Optionally, additional tests such as checking file existence can be added.)

The tests are modeled after the Table02_testing.py tests.
"""

import unittest
import os
import re
import wrds
import config
from pathlib import Path
import Table03  # The main pipeline module for Table 03

class TestTable03Outputs(unittest.TestCase):
    """
    Tests for the final outputs of the Table03 pipeline.
    """

    @classmethod
    def setUpClass(cls):
        """
        Runs the Table03 main pipeline once before all tests.
        This will generate the summary statistics and LaTeX files.
        """
        # Run the main pipeline to generate outputs (original version)
        Table03.main(UPDATED=False)
        # Set file paths for the generated outputs
        cls.latex_file = config.OUTPUT_DIR / "table03.tex"
        cls.summary_file = config.OUTPUT_DIR / "table03_sstable.tex"

    def test_latex_table_generated(self):
        """
        Test that the final LaTeX correlation table file is generated and non-empty.
        """
        self.assertTrue(os.path.exists(self.latex_file), "LaTeX table file 'table03.tex' was not generated.")
        with open(self.latex_file, 'r', encoding='utf-8') as f:
            content = f.read()
        self.assertGreater(len(content), 100, "LaTeX table file content is too short, may be incomplete.")

    def test_summary_statistics_no_na(self):
        """
        Test that the summary statistics LaTeX file does not contain any missing values.
        """
        self.assertTrue(os.path.exists(self.summary_file), "Summary statistics file 'table03_sstable.tex' was not generated.")
        with open(self.summary_file, 'r', encoding='utf-8') as f:
            content = f.read()
        # Check that the string "NaN" does not appear in the file
        self.assertNotIn("NaN", content, "Summary statistics file contains NaN values.")

    def test_numeric_values_in_correlation_table(self):
        """
        Test that the LaTeX correlation table contains valid numeric values.
        This uses a regex to find numbers in the file.
        """
        with open(self.latex_file, 'r', encoding='utf-8') as f:
            content = f.read()
        # Find numbers in the format of a float, e.g. "1.23"
        numbers = re.findall(r"\d+\.\d+", content)
        self.assertGreater(len(numbers), 0, "No numeric values found in the correlation table LaTeX file.")

if __name__ == '__main__':
    unittest.main()
